@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>
    <button class="btn btn-primary" @onclick="() => WarmDaysFilter(forecasts)">Show warm days</button>
    <button class="btn btn-primary" @onclick="() => filteredForecasts = forecasts">Show all days</button>
    </p>

    <input class="form-control" @oninput="@Input" />

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in filteredForecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <p>
        Number of warm days: @warmDays
    </p>
}

@code {
    private WeatherForecast[]? forecasts;
    private int warmDays = 0;
    private WeatherForecast[]? filteredForecasts;

    private void Input(ChangeEventArgs e)
	{
		var value = e.Value?.ToString();
		if (value != null)
		{
			filteredForecasts = forecasts.Where(forecast => forecast.Summary?.Contains(value, StringComparison.OrdinalIgnoreCase) == true).ToArray();
		}
	}

    private void WarmDaysFilter(WeatherForecast[] forecasts)
	{
		filteredForecasts = forecasts.Where(forecast => forecast.TemperatureC > 15).ToArray();
	}

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();

        warmDays = forecasts.Count(forecast => forecast.TemperatureC > 15);
        filteredForecasts = forecasts;
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
